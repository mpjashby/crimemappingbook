---
format: 
  revealjs:
    theme: [simple, ucl_presentation_style.scss]
    auto-stretch: true
    code-line-numbers: true
    embed-resources: true
    height: 810
    width: 1440
    margin: 0.05
    slide-number: true
    transition: fade
    background-transition: fade
from: markdown+emoji
execute: 
  echo: true
  cache: true
---


## {.center background-image="ucl-banner-land-yellow-rgb.png" background-position="top right" background-size="contain"}

<h1><span style="font-weight: normal;">Crime Mapping</span><br>Wrangling data</h1>



# Last week's exercise



--------------------------------------------------------------------------------


## Minimal working answer

```{r}
#| eval: false

# Load packages
pacman::p_load(ggspatial, sf, tidyverse)

# Load data
attacks <- read_csv("https://mpjashby.github.io/crimemappingdata/london_attacks.csv") |>
  st_as_sf(coords = c("longitude", "latitude"), crs = "EPSG:4326")

# Plot the map
ggplot(attacks) +
  annotation_map_tile(type = "osm", zoomin = 0, progress = "none") +
  geom_sf_label(aes(label = description), hjust = 1, size = 2.25) +
  geom_sf(colour = "mediumblue", size = 2) +
  scale_x_continuous(expand = expansion(mult = 0.5)) +
  scale_y_continuous(expand = expansion(mult = 0.1)) +
  labs(
    title = "Fatal terrorist attacks in London, 2000 to 2018",
    caption = "Background map by OpenStreetMap"
  ) +
  theme_void()
```


--------------------------------------------------------------------------------


## Minimal working answer

```{r}
#| echo: false

# Load packages
pacman::p_load(ggspatial, sf, tidyverse)

# Load data
attacks <- read_csv("https://mpjashby.github.io/crimemappingdata/london_attacks.csv") |>
  st_as_sf(coords = c("longitude", "latitude"), crs = "EPSG:4326")

# Plot the map
ggplot(attacks) +
  annotation_map_tile(type = "osm", zoomin = 0, progress = "none") +
  geom_sf_label(aes(label = description), hjust = 1, size = 2.25) +
  geom_sf(colour = "mediumblue", size = 2) +
  scale_x_continuous(expand = expansion(mult = 0.5)) +
  scale_y_continuous(expand = expansion(mult = 0.1)) +
  labs(
    title = "Fatal terrorist attacks in London, 2000 to 2018",
    caption = "Background map by OpenStreetMap"
  ) +
  theme_void()
```


--------------------------------------------------------------------------------


## Permanent vs. temporary code

:::: {.columns}

::: {.column width="50%" .fragment}
#### Permanent code

Code needed to complete a task, e.g. make a map

e.g. `read_csv()` to load a dataset
:::

::: {.column width="50%" .fragment}
#### Temporary code

Code needed only to _develop_ the code needed to complete a task

e.g. `head(attacks)` to find names of columns in a dataset
:::

::::


--------------------------------------------------------------------------------


## :no_entry_sign: No temporary code in R script files

::: {.nobullets}
* `col_names()`
* `excel_names()`
* `head()`
* `install.packages()`
* `learncrimemapping::check_code()`
* `names()`
* `show()`
* `str()`
:::


--------------------------------------------------------------------------------


## :sunglasses: Run temporary code in the R console

::: {.nobullets}
* `col_names()`
* `excel_names()`
* `head()`
* `install.packages()`
* `learncrimemapping::check_code()`
* `names()`
* `show()`
* `str()`
:::


--------------------------------------------------------------------------------


## Book chapters show where to run each piece of code:

Permanent code to go in a script:

```{r}
#| eval: false
#| filename: "chapter_02.R"

attacks <- read_csv("https://mpjashby.github.io/crimemappingdata/london_attacks.csv")
```


::: {.top-space}
Temporary code to go in the R Console:

```{r}
#| eval: false
#| filename: "R Console"

head(attacks)
```
:::


--------------------------------------------------------------------------------


## :no_entry_sign: Don't load packages part-way through scripts

```{r}
#| eval: false
#| code-line-numbers: "5"

pacman::p_load(tidyverse)

attacks <- read_csv("https://mpjashby.github.io/crimemappingdata/london_attacks.csv")

pacman::p_load(sf)

attacks_sf <- st_as_sf(
  attacks, 
  coords = c("longitude", "latitude"), 
  crs = "EPSG:4326"
)
```


--------------------------------------------------------------------------------


## :sunglasses: Load all the packages at the start of the script

```{r}
#| eval: false

pacman::p_load(sf, tidyverse)

attacks <- read_csv("https://mpjashby.github.io/crimemappingdata/london_attacks.csv")

attacks_sf <- st_as_sf(
  attacks, 
  coords = c("longitude", "latitude"), 
  crs = "EPSG:4326"
)
```


--------------------------------------------------------------------------------


## :no_entry_sign: No local file paths

```{r}
#| error: true

readr::read_csv("/Users/John Smith/Crime Mapping/downtown_homicides.csv")
```

```{r}
#| error: true

readr::read_csv("Crime Mapping/Week 1/downtown_homicides.csv")
```


--------------------------------------------------------------------------------


## :sunglasses: Download data inside your script

```{r}
readr::read_csv("https://mpjashby.github.io/crimemappingdata/london_attacks.csv")
```


--------------------------------------------------------------------------------


## :warning: Copy/paste with care: objects may not exist

```{r}
#| error: true
#| code-line-numbers: "5,9"

# Load the R packages we need to analyse this data
pacman::p_load(ggspatial, sf, tidyverse)

# Download the data directly from a URL and store it as an object
attacks <- read_csv("https://mpjashby.github.io/crimemappingdata/london_attacks.csv") |>
  st_as_sf(coords = c("longitude", "latitude"), crs = "EPSG:4326")

# Plot the map
ggplot(homicides_sf_trans)
```



--------------------------------------------------------------------------------


## :warning: Copy/paste with care: different maps need different choices

```{r}
#| eval: false

# Transform the data to a co-ordinate reference system for the state of Georgia
fatal_terrorist_sf_trans <- st_transform(fatal_terrorist_sf, "EPSG:26967")
```

::: {.fragment}
```{r}
#| echo: false

readr::read_csv("https://mpjashby.github.io/crimemappingdata/london_attacks.csv") |> 
  sf::st_as_sf(coords = c("longitude", "latitude"), crs = "EPSG:4326") |> 
  sf::st_transform("EPSG:26967") |> 
  ggplot2::ggplot() + 
  ggspatial::annotation_map_tile(type = "osm", zoomin = 0, progress = "none") + 
  ggplot2::geom_sf_label(ggplot2::aes(label = description), size = 2.5, hjust = 1, vjust = 0) + 
  ggplot2::geom_sf(colour = "mediumblue", size = 4) + 
  ggplot2::scale_x_continuous(expand = expansion(mult = 1.5)) + 
  ggplot2::scale_y_continuous(expand = expansion(mult = 0.2)) + 
  ggplot2::labs(
    title = "Fatal Terrorist attacks in London, 2010-2018",
    caption = "Background map by OpenStreetMap"
  ) +
  ggplot2::theme_void()
```
:::


--------------------------------------------------------------------------------


## :warning: Copy/paste with care: different maps need different choices

```{r}
#| eval: false
#| code-line-numbers: "1"

# Transform the data to a co-ordinate reference system for the city of London
fatal_terrorist_sf_trans <- st_transform(fatal_terrorist_sf, "EPSG:26967")
```


::: {.fragment}
```{r}
#| echo: false

readr::read_csv("https://mpjashby.github.io/crimemappingdata/london_attacks.csv") |> 
  sf::st_as_sf(coords = c("longitude", "latitude"), crs = "EPSG:4326") |> 
  sf::st_transform("EPSG:26967") |> 
  ggplot2::ggplot() + 
  ggspatial::annotation_map_tile(type = "osm", zoomin = 0, progress = "none") + 
  ggplot2::geom_sf_label(ggplot2::aes(label = description), size = 2.5, hjust = 1, vjust = 0) + 
  ggplot2::geom_sf(colour = "mediumblue", size = 4) + 
  ggplot2::scale_x_continuous(expand = expansion(mult = 1.5)) + 
  ggplot2::scale_y_continuous(expand = expansion(mult = 0.2)) + 
  ggplot2::labs(
    title = "Fatal Terrorist attacks in London, 2010-2018",
    caption = "Background map by OpenStreetMap"
  ) +
  ggplot2::theme_void()
```
:::


--------------------------------------------------------------------------------


## :sunglasses: Copy/paste with care: different maps need different choices

```{r}
#| eval: false

# Transform the data to a co-ordinate reference system for the UK
fatal_terrorist_sf_trans <- st_transform(fatal_terrorist_sf, "EPSG:27700")
```

```{r}
#| echo: false

readr::read_csv("https://mpjashby.github.io/crimemappingdata/london_attacks.csv") |> 
  sf::st_as_sf(coords = c("longitude", "latitude"), crs = "EPSG:4326") |> 
  sf::st_transform("EPSG:27700") |> 
  ggplot2::ggplot() + 
  ggspatial::annotation_map_tile(type = "osm", zoomin = 0, progress = "none") + 
  ggplot2::geom_sf_label(ggplot2::aes(label = description), size = 2.5, hjust = 1, vjust = 0) + 
  ggplot2::geom_sf(colour = "mediumblue", size = 4) + 
  ggplot2::scale_x_continuous(expand = expansion(mult = 0.3)) + 
  ggplot2::scale_y_continuous(expand = expansion(mult = 0.2)) + 
  ggplot2::labs(
    title = "Fatal Terrorist attacks in London, 2010-2018",
    caption = "Background map by OpenStreetMap"
  ) +
  ggplot2::theme_void()
```


--------------------------------------------------------------------------------


## :no_entry_sign: Don't use `zoom` in `annotation_map_tile()`

```{r}
#| code-line-numbers: "10"

# Load the R packages we need to analyse this data
pacman::p_load(ggspatial, sf, tidyverse)

# Download the data directly from a URL and store it as an object
attacks <- read_csv("https://mpjashby.github.io/crimemappingdata/london_attacks.csv") |>
  st_as_sf(coords = c("longitude", "latitude"), crs = "EPSG:4326")

# Plot the map
ggplot(attacks) +
  annotation_map_tile(zoom = 0, progress = "none") + 
  geom_sf(size = 4)
```


--------------------------------------------------------------------------------


## :sunglasses: Use `zoomin` in `annotation_map_tile()`

```{r}
#| code-line-numbers: "10"

# Load the R packages we need to analyse this data
pacman::p_load(ggspatial, sf, tidyverse)

# Download the data directly from a URL and store it as an object
attacks <- read_csv("https://mpjashby.github.io/crimemappingdata/london_attacks.csv") |>
  st_as_sf(coords = c("longitude", "latitude"), crs = "EPSG:4326")

# Plot the map
ggplot(attacks) +
  annotation_map_tile(zoomin = 0, progress = "none") + 
  geom_sf(size = 4)
```


--------------------------------------------------------------------------------


## :no_entry_sign: Don't forget to comment your code


```{r}
#| eval: false

pacman::p_load(ggspatial, sf, tidyverse)

attacks <- read_csv("https://mpjashby.github.io/crimemappingdata/london_attacks.csv") |>
  st_as_sf(coords = c("longitude", "latitude"), crs = "EPSG:4326")

ggplot(attacks) +
  annotation_map_tile(zoomin = 0, progress = "none") + 
  geom_sf(size = 4) +
  scale_x_continuous(expand = expansion(mult = 0.5)) +
  scale_y_continuous(expand = expansion(mult = 0.2)) +
  labs(
    title = "Fatal Terrorist Attacks in London Between 2010 and 2018.",
    caption = "Background map by OpenStreetMap"
  ) +
  theme_void()
```


--------------------------------------------------------------------------------


## :sunglasses: Comment your code


```{r}
#| eval: false

# Load the R packages we need to analyse this data
pacman::p_load(ggspatial, sf, tidyverse)

# Download the data directly from a URL and store it as an object
attacks <- read_csv("https://mpjashby.github.io/crimemappingdata/london_attacks.csv") |>
  st_as_sf(coords = c("longitude", "latitude"), crs = "EPSG:4326")

# Plot the map
ggplot(attacks) +
  annotation_map_tile(zoomin = 0, progress = "none") + 
  geom_sf(size = 4) +
  scale_x_continuous(expand = expansion(mult = 0.5)) +
  scale_y_continuous(expand = expansion(mult = 0.2)) +
  labs(
    title = "Fatal Terrorist Attacks in London Between 2010 and 2018.",
    caption = "Background map by OpenStreetMap"
  ) +
  theme_void()
```


--------------------------------------------------------------------------------


## Comments start with `#` _and a space_

:no_entry_sign: Incorrect:

```{r}
#| eval: false

#This is a comment
```


:::: {.fragment .top-space}
:sunglasses: Correct:

```{r}
#| eval: false

# This is a comment
```

::: {.top-space}
This is going to matter a lot later in the module
:::

::::


--------------------------------------------------------------------------------


## :no_entry_sign: Don't compress your code

```{r}
#| eval: false

# Load the R packages we need to analyse this data
pacman::p_load(ggspatial,sf,tidyverse)
# Download the data directly from a URL and store it as an object
attacks <- read_csv("https://mpjashby.github.io/crimemappingdata/london_attacks.csv") |>
  st_as_sf(coords=c("longitude","latitude"), crs="EPSG:4326")
# Plot the map
ggplot(attacks) +
  annotation_map_tile(zoomin=0,progress="none") + 
  geom_sf(size=4) +
  scale_x_continuous(expand=expansion(mult=0.5)) +
  scale_y_continuous(expand=expansion(mult=0.2)) +
  labs(
    title="Fatal Terrorist Attacks in London Between 2010 and 2018.",
    caption="Background map by OpenStreetMap"
  ) +
  theme_void()
```


--------------------------------------------------------------------------------


## :wind_face: Let your code breathe

```{r}
#| eval: false

# Load the R packages we need to analyse this data
pacman::p_load(ggspatial, sf, tidyverse)

# Download the data directly from a URL and store it as an object
attacks <- read_csv("https://mpjashby.github.io/crimemappingdata/london_attacks.csv") |>
  st_as_sf(coords = c("longitude", "latitude"), crs = "EPSG:4326")

# Plot the map
ggplot(attacks) +
  annotation_map_tile(zoomin = 0, progress = "none") + 
  geom_sf(size = 4) +
  scale_x_continuous(expand = expansion(mult = 0.5)) +
  scale_y_continuous(expand = expansion(mult = 0.2)) +
  labs(
    title = "Fatal Terrorist Attacks in London Between 2010 and 2018.",
    caption = "Background map by OpenStreetMap"
  ) +
  theme_void()
```



# 

::: {.center}
![](quiz.jpeg){fig-alt="quiz"}
:::


# The pipe operator `|>`


--------------------------------------------------------------------------------


## Lots of R code looks like this:

```{r}
#| eval: false

# This script counts the number of robberies on each day of the week in the
# first quarter of 2019

# Load robbery data
robbery1 <- read_csv("https://mpjashby.github.io/crimemappingdata/san_francisco_robbery.csv")

# Select only the columns we need
robbery2 <- select(robbery1, date_time)

# Filter only those offences that occurred in the first quarter of 2019
robbery3 <- filter(robbery2, as_date(date_time) <= ymd("2019-03-31"))

# Create a new weekday variable
robbery4 <- mutate(robbery3, weekday = wday(date_time, label = TRUE))

# Count how many offences occurred on each weekday
count(robbery4, weekday)
```


--------------------------------------------------------------------------------


## Lots of R code looks like this:

```{r}
#| eval: false
#| code-line-numbers: "5,8"

# This script counts the number of robberies on each day of the week in the
# first quarter of 2019

# Load robbery data
robbery1 <- read_csv("https://mpjashby.github.io/crimemappingdata/san_francisco_robbery.csv")

# Select only the columns we need
robbery2 <- select(robbery1, date_time)

# Filter only those offences that occurred in the first quarter of 2019
robbery3 <- filter(robbery2, as_date(date_time) <= ymd("2019-03-31"))

# Create a new weekday variable
robbery4 <- mutate(robbery3, weekday = wday(date_time, label = TRUE))

# Count how many offences occurred on each weekday
count(robbery4, weekday)
```


::: {.top-space}
`robbery1` is (a) created, (b) used _once_, and (c) never used again
:::


--------------------------------------------------------------------------------


## Lots of R code looks like this:

```{r}
#| eval: false
#| code-line-numbers: "5,8,11,14,17"

# This script counts the number of robberies on each day of the week in the
# first quarter of 2019

# Load robbery data
robbery1 <- read_csv("https://mpjashby.github.io/crimemappingdata/san_francisco_robbery.csv")

# Select only the columns we need
robbery2 <- select(robbery1, date_time)

# Filter only those offences that occurred in the first quarter of 2019
robbery3 <- filter(robbery2, as_date(date_time) <= ymd("2019-03-31"))

# Create a new weekday variable
robbery4 <- mutate(robbery3, weekday = wday(date_time, label = TRUE))

# Count how many offences occurred on each weekday
count(robbery4, weekday)
```


::: {.top-space}
The same is true with `robbery2`, `robbery3` and `robbery4`
:::


--------------------------------------------------------------------------------


## create + use _once_ + never use again :arrow_forward: no need to create object

Unnecessary objects:

::: {.fragment .top-space}
make code longer :arrow_forward: harder to read :arrow_forward: harder to understand
:::

::: {.fragment .top-space}
increase risk of typo errors, e.g.

```{r}
#| eval: false
#| code-line-numbers: "3"

robbery3 <- filter(robbery2, as_date(date_time) <= ymd("2019-03-31"))

robbery4 <- mutate(robbary3, weekday = wday(date_time, label = TRUE))
```
:::

::: {.fragment .top-space}
make it easier to mix up objects, e.g.

```{r}
#| eval: false
#| code-line-numbers: "5"

robbery2 <- select(robbery1, date_time)

robbery3 <- filter(robbery2, as_date(date_time) <= ymd("2019-03-31"))

robbery4 <- mutate(robbery2, weekday = wday(date_time, label = TRUE))
```
:::


--------------------------------------------------------------------------------


## create + use _once_ + never use again :arrow_forward: use the pipe

Instead of:

```{r}
#| eval: false

robbery1 <- read_csv("https://mpjashby.github.io/crimemappingdata/san_francisco_robbery.csv")

robbery2 <- select(robbery1, date_time)
```

::: {.top-space}
Use this:

```{r}
#| eval: false

robbery_dates <- read_csv("https://mpjashby.github.io/crimemappingdata/san_francisco_robbery.csv") |> 
  select(date_time)
```
:::

::: {.incremental .nobullets}
* `|>` connects lines
* first argument (`robbery2`) of second function not included
* `|>` at end of line
* every line after first indented by 2 spaces
:::


--------------------------------------------------------------------------------


## Keep extending the _pipeline_ until you have produced an object you need to keep

```{r}
#| code-line-numbers: "5"

robbery_wday_count <- read_csv("https://mpjashby.github.io/crimemappingdata/san_francisco_robbery.csv") |> 
  select(date_time) |> 
  filter(as_date(date_time) <= ymd("2019-03-31")) |> 
  mutate(weekday = wday(date_time, label = TRUE)) |> 
  count(weekday)

gt::gt(robbery_wday_count)
```


--------------------------------------------------------------------------------


## Read `|>` as "and then"

```{r}
#| eval: false
#| code-line-numbers: "1"

robbery_wday_count <- read_csv("https://mpjashby.github.io/crimemappingdata/san_francisco_robbery.csv") |> 
  select(date_time) |> 
  filter(as_date(date_time) <= ymd("2019-03-31")) |> 
  mutate(weekday = wday(date_time, label = TRUE)) |> 
  count(weekday)
```

::: {.nobullets}
* "load the data **and then**"
:::


--------------------------------------------------------------------------------


## Read `|>` as "and then"

```{r}
#| eval: false
#| code-line-numbers: "1-2"

robbery_wday_count <- read_csv("https://mpjashby.github.io/crimemappingdata/san_francisco_robbery.csv") |> 
  select(date_time) |> 
  filter(as_date(date_time) <= ymd("2019-03-31")) |> 
  mutate(weekday = wday(date_time, label = TRUE)) |> 
  count(weekday)
```

::: {.nobullets}
* "load the data **and then**"
* "… select the `date_time` column **and then**"
:::


--------------------------------------------------------------------------------


## Read `|>` as "and then"

```{r}
#| eval: false
#| code-line-numbers: "1-3"

robbery_wday_count <- read_csv("https://mpjashby.github.io/crimemappingdata/san_francisco_robbery.csv") |> 
  select(date_time) |> 
  filter(as_date(date_time) <= ymd("2019-03-31")) |> 
  mutate(weekday = wday(date_time, label = TRUE)) |> 
  count(weekday)
```

::: {.nobullets}
* "load the data **and then**"
* "… select the `date_time` column **and then**"
* "… filter for dates on/before 31 March 2019 **and then**"
:::


--------------------------------------------------------------------------------


## Read `|>` as "and then"

```{r}
#| eval: false
#| code-line-numbers: "1-4"

robbery_wday_count <- read_csv("https://mpjashby.github.io/crimemappingdata/san_francisco_robbery.csv") |> 
  select(date_time) |> 
  filter(as_date(date_time) <= ymd("2019-03-31")) |> 
  mutate(weekday = wday(date_time, label = TRUE)) |> 
  count(weekday)
```

::: {.nobullets}
* "load the data **and then**"
* "… select the `date_time` column **and then**"
* "… filter for dates on/before 31 March 2019 **and then**"
* "… extract weekday of each robbery **and then**"
:::


--------------------------------------------------------------------------------


## Read `|>` as "and then"

```{r}
#| eval: false

robbery_wday_count <- read_csv("https://mpjashby.github.io/crimemappingdata/san_francisco_robbery.csv") |> 
  select(date_time) |> 
  filter(as_date(date_time) <= ymd("2019-03-31")) |> 
  mutate(weekday = wday(date_time, label = TRUE)) |> 
  count(weekday)
```

::: {.nobullets}
* "load the data **and then**"
* "… select the `date_time` column **and then**"
* "… filter for dates on/before 31 March 2019 **and then**"
* "… extract weekday of each robbery **and then**"
* "… count number of robberies each weekday"
:::


--------------------------------------------------------------------------------

## :warning: Don't add a pipe `|>` to the final line

```{r}
#| error: true
#| code-line-numbers: "5"

robbery_wday_count <- read_csv("https://mpjashby.github.io/crimemappingdata/san_francisco_robbery.csv") |> 
  select(date_time) |> 
  filter(as_date(date_time) <= ymd("2019-03-31")) |> 
  mutate(weekday = wday(date_time, label = TRUE)) |> 
  count(weekday) |> 
```


```{r}
#| error: true
#| code-line-numbers: "5"

robbery_wday_count <- read_csv("https://mpjashby.github.io/crimemappingdata/san_francisco_robbery.csv") |> 
  select(date_time) |> 
  filter(as_date(date_time) <= ymd("2019-03-31")) |> 
  mutate(weekday = wday(date_time, label = TRUE)) |> 
  count(weekday) |> 
  
nrow(robbery_wday_count)
```



# This week

::: {.nobullets}
* :book: complete chapters 3 and 4
* :technologist: complete this week's exercise
* :wave: ask questions at any time
:::

# Mapping crime series {#sec-crime-series}


::: {.abstract}
In this chapter we will learn to map _crime series_, a sequence of crimes committed by the same individual or group. Using a historical case study, you will learn how to visualize crime series by mapping linked cases.
:::


::: {.callout-tip}
#### Before you start

Open RStudio or -- if you already have RStudio open -- click `Session` then `Restart R`. Make sure you're working inside the Crime Mapping RStudio project you created in @sec-create-project, then you're ready to start mapping.
:::


```{r}
#| echo: false
#| include: false

pacman::p_load(ggrepel, ggspatial, patchwork, tidyverse)

hungerford_shootings <- crimemappingdata::hungerford_shootings
```


<!-- Case linkage: http://eknygos.lsmuni.lt/springer/605/117-133.pdf -->


## Introduction

It's common in crime mapping to treat each crime as a separate event. But a large proportion of crimes are committed by a relatively small proportion of all
the people who commit crime. These persistent or repeat offenders commit crimes frequently, maybe several times a day in the case of some people. One type of repeat offending is the *crime series*, in which an offender or group of offenders commits the same or related crimes in different places over time. 


### Case linkage

One of the difficulties in studying serial offending is in identifying which offences are committed by the same offender. *Case linkage* is the process of identifying crime series by looking for similarities in the method used by an offender (e.g. entering a house by  breaking a lock on a side door out of sight from the street) or by evidence left at the scene (such as fingerprints or DNA). Case linkage is typically an imperfect process -- investigators might believe that two offences were committed by the same person, but in most cases they are unlikely to know for sure unless the offender has been caught (and sometimes not even then).

Watch this video to learn a bit more about crime linkage.

{{< video https://youtu.be/XPOtaFRYrQs?t=13 >}}


::: {.callout-quiz .callout}
#### Case linkage

```{r case-linkage-quiz}
#| echo: false

case_linkage_quiz1 <- c(
  "To determine the time a crime was committed",
  answer = "To identify which offenses were committed by the same offender",
  "To analyze the psychological state of the offender",
  "To predict where future crimes will occur"
)

case_linkage_quiz2 <- c(
  answer = "The specific methods the offender uses to carry out their crimes",
  "The DNA evidence left behind at the crime scene",
  "The legal defense strategy used by the offender in court",
  "The geographical location where the crimes occur"
)

case_linkage_quiz3 <- c(
  "The offender’s modus operandi",
  "The geographical locations of the crimes",
  answer = "Forensic evidence, such as DNA",
  "The type of victim the offender targets"
)
```


**What is the primary goal of case linkage?**

`r webexercises::longmcq(case_linkage_quiz1)`


**Which of the following is an example of an offender’s modus operandi (MO)?**

`r webexercises::longmcq(case_linkage_quiz2)`


**According to the video, what is the most reliable factor to use when linking crimes?**

`r webexercises::longmcq(case_linkage_quiz3)`


:::


Once crimes have been linked together as being part of the same series, it can be useful to map them to better understand how the series has progressed. In this chapter we will learn how to map linked cases.


### The case used in this chapter

Due to the inherent uncertainty of case linkage, there is little publicly available data on the locations of serial crimes. The available data tends to focus on serial murders. To minimise the likelihood of anyone reading this book having been directly affected by -- or know anyone affected by -- the cases we use in this chapter, we will use a historical example.


```{r include=FALSE}
hungerford_murder_count <- hungerford_shootings |> 
  mutate(murder_count = str_count(victims, "†")) |>  
  summarise(murder_count = sum(murder_count)) |> 
  pull(murder_count)
```


The [Hungerford massacre](https://en.wikipedia.org/wiki/Hungerford_massacre) occurred in southern England in August 1987, when a marauding attacker (also 
known as a spree offender) killed `r hungerford_murder_count` people and shot many others in the space of about 90 minutes. We will use a dataset called 
`hungerford_shootings` that contains the names of each victim and the approximate location at which they were shot (recorded as eastings and northings in the British National Grid). This data is taken from the [official report into the massacre](https://www.jesip.org.uk/uploads/media/incident_reports_and_inquiries/Hungerford%20Shootings.pdf). The `order` column shows the order in which the victims were shot. These are the first few rows of the dataset (the dagger symbol † shows that the victim was killed):


```{r, echo=FALSE}
hungerford_shootings |> 
  mutate(victims = str_replace_all(victims, "\\n", ", ")) |> 
  head(5) |> 
  knitr::kable()
```


In this chapter we will learn how to create this composite map of the locations of the shootings in this crime series.


```{r}
#| eval: false
#| echo: false

# Prepare data -----------------------------------------------------------------

# Create dataset of lines joining shootings in sequence
hungerford_lines <- hungerford_shootings |> 
  rename(x_end = easting, y_end = northing) |> 
  mutate(x_start = lag(x_end), y_start = lag(y_end)) |> 
  # Remove the first line, which contains missing values and which we don't need
  drop_na(x_start, y_start)



# Make component maps ----------------------------------------------------------

# Create map showing overall locations of shootings
hungerford_map_overall <- ggplot() +
  # Plot base map
  annotation_map_tile(type = "cartolight", zoomin = 0, progress = "none") +
  # Plot lines between points
  geom_curve(
    aes(x = x_start, y = y_start, xend = x_end, yend = y_end),
    data = hungerford_lines, 
    arrow = arrow(length = unit(3, "mm"), type = "closed"),
    curvature = -0.2,
    colour = "orange3"
  ) +
  # Add points
  geom_point(
    aes(x = easting, y = northing), 
    data = hungerford_shootings,
    shape = 21,
    colour = "white",
    fill = "orange3",
    size = 3
  ) +
  # Add labels
  geom_label_repel(
    aes(x = easting, y = northing, label = order),
    data = filter(hungerford_shootings, order %in% 1:2), 
    colour = "white",
    fill = "orange3",
    fontface = "bold",
    label.size = NA
  ) +
  # Add scale bar
  annotation_scale(style = "ticks", line_col = "grey40", text_col = "grey40") +
  # Expand the map to show a larger area above/below the data
  scale_y_continuous(expand = expansion(2)) +
  # Specify co-ordinate system
  coord_sf(crs = "EPSG:27700") +
  labs(title = " Shootings in Wiltshire") +
  theme_void() +
  theme(
    panel.border = element_rect(colour = "grey20", fill = NA),
    plot.title = element_text(margin = margin(b = -18))
  )

# Create inset map showing shootings in Hungerford town
hungerford_map_town <- ggplot() +
  annotation_map_tile(type = "cartolight", zoomin = 0, progress = "none") +
  # Add lines between points
  geom_curve(
    aes(x = x_start, y = y_start, xend = x_end, yend = y_end),
    data = slice(hungerford_lines, 3:n()), 
    arrow = arrow(length = unit(3, "mm"), type = "closed"),
    curvature = -0.2,
    colour = "orange3"
  ) +
  # Add points
  geom_point(
    aes(x = easting, y = northing), 
    data = slice(hungerford_shootings, 3:n()), 
    shape = 21,
    colour = "white",
    fill = "orange3",
    size = 3
  ) +
  # Add labels
  geom_label_repel(
    aes(x = easting, y = northing, label = order),
    data = slice(hungerford_shootings, 3:n()), 
    colour = "white",
    fill = "orange3",
    fontface = "bold",
    label.size = NA
  ) +
  # Add scale bar
  annotation_scale(style = "ticks", line_col = "grey40", text_col = "grey40") +
  # Expand the map to show a larger area around the data
  scale_x_continuous(expand = expansion(0.3)) +
  scale_y_continuous(expand = expansion(0.3)) +
  # Specify co-ordinate system
  coord_sf(crs = "EPSG:27700") +
  labs(title = "Shootings in Hungerford town") +
  theme_void() +
  theme(
    panel.border = element_rect(colour = "grey20", fill = NA),
    plot.margin = margin(t = 12)
  )



# Combine maps and add titles --------------------------------------------------

hungerford_map <- (hungerford_map_overall / hungerford_map_town) + 
  plot_annotation(
    title = "Shootings during the Hungerford massacre",
    caption = "data from the official report into the shootings",
    theme = theme(
      plot.caption = element_text(colour = "grey40", hjust = 0),
      plot.title = element_text(colour = "grey50", face = "bold", size = 14)
    )
  )

ggsave(
  here::here("images/hungerford_map.jpg"), 
  hungerford_map,
  width = 900 / 150,
  height = 900 / 150,
  dpi = 150
)
```


<p class="full-width-image"><img src="../images/hungerford_map.jpg" alt="A map showing the sequence of events during the Hungerford Massacre" style="max-height: 900px;"></p>


Let's start by creating a new R script file and save it as `chapter13.R`. Now add this code to load the necessary packages and data to make the map of the shootings in Hungerford:


```{r}
#| filename: "chapter13.R"

# This script creates a combination of maps showing the sequence of shootings
# during the Hungerford massacre in 1987



# Load data --------------------------------------------------------------------

# Load packages
pacman::p_load(ggrepel, ggspatial, patchwork, tidyverse)

# Load shootings data
hungerford_shootings <- read_csv("https://mpjashby.github.io/crimemappingdata/hungerford_shootings.csv")
```

You might notice this code loads some packages we haven't worked with before. We'll introduce these packages in this chapter.


## Mapping linked cases

Mapping crime series can be useful for several reasons. For example, a map of a crime series might help the jurors in a criminal trial to better understand the sequence of events that the suspect is accused of. This can be especially helpful if the sequence is complicated or especially long.

At the moment, the `hungerford_shootings` dataset contains the *point* location of each event and the order in which they occurred. To show a sequence of events on a map, we need to link each event with those that happened immediately before and after it. 

```{r, echo=FALSE}
hungerford_shootings |> 
  mutate(victims = str_replace_all(victims, "\\n", ", ")) |> 
  head(5) |> 
  knitr::kable()
```

One way to do that is to draw lines on the map connecting each incident in turn. To do this, we will create a dataset where each row contains _two_ pairs of co-ordinates: one representing the location of a particular shooting and the other representing the location of the _previous_ shooting. To do that, we will:

  1. Take the `hungerford_shootings` dataset and rename the existing columns holding the co-ordinates so that it is clear those co-ordinates are for the
     _end_ of each line between points. To do this we will use the `rename()` function from the dplyr package.
  2. Add two new columns to each row that show the co-ordinates of the row in the dataset immediately above the current row (i.e. the row that represents
     the location before the current location. We will do this with the `lag()` function, also from dplyr.
  3. Use these two pairs of co-ordinates to plot lines on a map.

```{r}
#| filename: "chapter13.R"

# Prepare data -----------------------------------------------------------------

# Create dataset of lines joining shootings in sequence
hungerford_lines <- hungerford_shootings |> 
  rename(x_end = easting, y_end = northing) |> 
  mutate(x_start = lag(x_end), y_start = lag(y_end)) |> 
  # Remove the first line, which contains missing values and which we don't need
  drop_na(x_start, y_start)
```

```{r}
#| filename: "R Console"

head(hungerford_lines)
```


::: {.callout-tip collapse="true"}
#### Why does this code include `drop_na()`?

You might notice that the values in the first row of the `x_start` and `x_end` columns in the `hungerford_lines` object are `NA` values. This is because these columns have been created using the `lag()` function, which gets the value from the same column in the row immediately above. The first row doesn't have a row immediately above it, so `lag()` returns `NA`. Since the first row does not represent a link between shootings in any case, we can remove it with
`drop_na()`.
:::


This method for creating lines between points is one of several ways we could achieve the same result. For example, we could create lines connecting the points and store them as SF objects. However, the code to do that is more complicated and gives us slightly less control over the appearance of the lines, so we will not use that method. 

Using this method means the points and lines we want to put on our map are not SF objects, so we cannot use `geom_sf()` to add them to the map. Instead, we will add the points representing shooting locations to the map using `geom_point()` and add the lines between points using `geom_segment()`, both from the ggplot2 package. 

Run this code in the R Console.


```{r}
#| filename: "R Console"
#| fig-asp: 0.3

# Plot a basic map
ggplot() +
  # Add base map
  annotation_map_tile(type = "cartolight", zoomin = 0, progress = "none") +
  # Add lines between points
  geom_segment(
    aes(x = x_start, y = y_start, xend = x_end, yend = y_end), 
    data = hungerford_lines
  ) +
  # Add points
  geom_point(aes(x = easting, y = northing), data = hungerford_shootings) +
  # Since our layers are not an SF object, tell `ggplot()` what co-ordinate 
  # system to use
  coord_sf(crs = "EPSG:27700") +
  theme_void()
```


This map is not particularly useful -- we will return to that in a minute.

If you look at this code, you'll see that we've included the function `coord_sf()` in our `ggplot()` stack. In all the previous maps that we have made, we have used `geom_sf()` to plot geographic data on our maps. `geom_sf()` understands how to translate co-ordinates specified using different co-ordinate systems to locations on the surface of each map. Other functions in the `geom_*()` family of functions do not know how to do this automatically, so we must specify the co-ordinate system by adding the `coord_sf()` function to the stack. We only need to use one argument to `coord_sf()`: the `crs` argument to specify the co-ordinate system that our data uses. In this case, we know that the co-ordinates in the `hungerford_shootings` and `hungerford_lines` objects are specified using the British National Grid, which has the EPSG code EPSG:27700.

The map we have made above shows the sequence of events, but there are at least four ways that we can make it better.

  1. It would be useful to be able to see a larger area around the shooting locations, to see more of the town surrounding the area in which the crimes occurred.
  2. We don't know which order to move through the sequence of lines. We can deal with this by adding arrows to show the direction that the offender travelled.
  3. The straight lines make it look like the offender travelled across fields between locations, which is probably not true. Since we do not have data on what routes the offender took, we can replace the straight lines with curves to indicate that the exact route is unknown.
  4. Because the first two shootings occurred outside the town, the map has to cover a large area and this makes it harder to see the sequence of events in the town itself.


### Extending the map area

By default, `ggplot()` works out the limits of the area shown on the map based on the area covered by the data we add to each stack with functions from the `geom_*()` family of functions. Usually this works well, but in this case the distribution of the shootings means that the map shows only a small slice of the town of Hungerford and the surrounding area. It would be useful for readers to be able to see a larger area, to be able to better identify where the shootings occurred. 

We can increase the size of the area shown on the plot in two ways. We could use the `fixed_plot_aspect()` function from the ggspatial package to control the aspect ratio of the plot (i.e. how tall it is relative to how wide it is). With some trial and error, we could use this to determine the best aspect ratio for showing the data on this map. However, this only allows us to control the overall size of the plot, not the amount of space around the data in each direction. 

For more-specific control over what area is shown, we can use the `scale_x_continuous()` and `scale_y_continuous()` functions from the ggplot2 package. We have used the `scale_fill_distiller()` and `scale_fill_gradient()` functions in previous chapters to control how columns in the data are represented as colours on the map. The `scale_x_continuous()` and `scale_y_continuous()` functions are similar, in that they control the horizontal (X) and vertical (Y) axes on the map. We don't need to use most of the capabilities of these because `ggplot()` sets reasonable default values. The only argument we need to set is the `expand` argument, which controls how far the map should extend around the area covered by the data.

The easiest way to set the correct values for the `expand` argument is to use the `expansion()` helper function. We can use this to specify how much extra area around the data we want to include on the map. For example, `expansion(2)` means that the axis of the map should cover the area covered by the data and twice that distance either side of the data.

Run this code in the R Console.


```{r}
#| filename: "R Console"
#| fig-asp: 0.3

# Plot a basic map
ggplot() +
  # Add base map
  annotation_map_tile(type = "cartolight", zoomin = 0, progress = "none") +
  # Add lines between points
  geom_segment(
    aes(x = x_start, y = y_start, xend = x_end, yend = y_end), 
    data = hungerford_lines
  ) +
  # Add points
  geom_point(aes(x = easting, y = northing), data = hungerford_shootings) +
  # Expand the map to show a larger area above/below the data
  scale_y_continuous(expand = expansion(2)) +
  # Specify co-ordinate system
  coord_sf(crs = "EPSG:27700") +
  theme_void()
```

::: {.callout-important}
#### `scale_x_continuous()` vs `scale_y_continuous()`

The `scale_y_continuous()` function specifically controls the vertical (Y) axis of the map, so it only adds space above and below the data on the map. If we wanted to add space to the left and right of the data, we would need to use the `scale_x_continuous()` function. But in this case, since the map is already very wide relative to its height, we will not make the map any wider.
:::


### Adding arrows and curves

To add an arrow to the end of each line segment we can use the `arrow()` helper function from the `ggplot2` package to specify the `arrow` argument of the `geom_segment()` function in our `ggplot()` stack. Here, we make the arrow head smaller than the default by setting `length = unit(3, "mm")` and choose the style of the arrow head with `type = "closed"`.

To prevent the arrow heads from obscuring the points, we will give the points a thin white border by specifying `shape = 21` (a circle with a separate border) and `colour = "white"`, as well as making the points slightly bigger with `size = 2`.

Run this code in the R Console.


```{r}
#| filename: "R Console"
#| fig-asp: 0.3

ggplot() +
  # Add base map
  annotation_map_tile(type = "cartolight", zoomin = 0, progress = "none") +
  # Add lines between points
  geom_segment(
    aes(x = x_start, y = y_start, xend = x_end, yend = y_end),
    data = hungerford_lines, 
    arrow = arrow(length = unit(3, "mm"), type = "closed"),
    colour = "orange3"
  ) +
  # Add points
  geom_point(
    aes(x = easting, y = northing), 
    data = hungerford_shootings,
    shape = 21,
    colour = "white",
    fill = "orange3",
    size = 3
  ) +
  # Expand the map to show a larger area above/below the data
  scale_y_continuous(expand = expansion(2)) +
  # Specify co-ordinate system
  coord_sf(crs = "EPSG:27700") +
  theme_void()
```

This makes it easier to see that the shootings started at the point on the left of the map, but makes the problem of understanding the sequence of events in the town itself even worse. We will deal with this in the next section.

In the map above, we used the `geom_segment()` function to add the lines to our map. If we change this to `geom_curve()` the lines will become curved rather than straight. By specifying `curvature = -0.2` we get a slightly straighter line than the default, and a left-hand curve because the value of `curvature` is negative.

The other change we can make at this point is to add a layer of labels showing the order in which the shootings occurred. We don't want the labels to overlap the points, so instead of adding labels with the `geom_label()` function from the ggplot2 package we will use `geom_label_repel()` from the ggrepel package. `geom_label_repel()` creates labels that are automatically offset from the points they relate to. For now, we will just label the first two locations. 

At this point we can also make some minor changes to the map -- adding a title and scale bar, putting a border around the map -- the purpose of which will become clear in the next section.

Add this code to the `chapter13.R` script file and run it.


```{r}
#| filename: "chapter13.R"
#| fig-asp: 0.3

# Make component maps ----------------------------------------------------------

# Create map showing overall locations of shootings
hungerford_map_overall <- ggplot() +
  # Plot base map
  annotation_map_tile(type = "cartolight", zoomin = 0, progress = "none") +
  # Plot lines between points
  geom_curve(
    aes(x = x_start, y = y_start, xend = x_end, yend = y_end),
    data = hungerford_lines, 
    arrow = arrow(length = unit(3, "mm"), type = "closed"),
    curvature = -0.2,
    colour = "orange3"
  ) +
  # Add points
  geom_point(
    aes(x = easting, y = northing), 
    data = hungerford_shootings,
    shape = 21,
    colour = "white",
    fill = "orange3",
    size = 3
  ) +
  # Add labels
  geom_label_repel(
    aes(x = easting, y = northing, label = order),
    data = filter(hungerford_shootings, order %in% 1:2), 
    colour = "white",
    fill = "orange3",
    fontface = "bold",
    label.size = NA
  ) +
  # Add scale bar
  annotation_scale(style = "ticks", line_col = "grey40", text_col = "grey40") +
  # Expand the map to show a larger area above/below the data
  scale_y_continuous(expand = expansion(2)) +
  # Specify co-ordinate system
  coord_sf(crs = "EPSG:27700") +
  labs(title = " Shootings in Wiltshire") +
  theme_void() +
  theme(
    panel.border = element_rect(colour = "grey20", fill = NA),
    plot.title = element_text(margin = margin(b = -18))
  )
```


Since we have saved this latest map to an object called `hungerford_map_overall`, we need to run the object name in the R Console in order to print the map in the RStudio Plots panel.


```{r}
#| filename: "R Console"
#| fig-asp: 0.3

hungerford_map_overall
```


Now we have added arrow heads and curved lines, in the next section we will learn how to solve the problem of the events in the town itself being unclear on the map.


::: {.callout-quiz .callout}
#### Mapping crime series

```{r series-quiz}
#| echo: false

series_quiz1 <- c(
  "By adding street names to each location",
  "By removing locations that are too close together",
  answer = "By connecting each point to the previous crime location",
  "By only mapping the final crime in the series"
)

series_quiz2 <- c(
  answer = "To include more contextual information about the surrounding environment",
  "To make the map appear more colorful",
  "To reduce the number of crime points displayed",
  "To increase the complexity of the visualization"
)

series_quiz3 <- c(
  "`theme_void()`",
  answer = "`geom_label_repel()`",
  "`position_dodge()`",
  "`geom_text()`"
)
```

**How can we modify point locations to show movement in a crime series?**

`r webexercises::longmcq(series_quiz1)`


**Why might we want to extend the area shown on a crime series map?**

`r webexercises::longmcq(series_quiz2)`


**Which function in R can be used to prevent label overlap on crime maps?**

`r webexercises::longmcq(series_quiz3)`


:::


## Multiple maps

<p class="full-width-image"><img src="../images/patchwork_1.jpg" alt="Cartoon showing furry monsters arranging three picture frames hanging from a wall."></p>

Our existing map is difficult to understand because we have a mix of some events very close together (including several on the same street) and some that occurred further away. This means the closer events overlap on the map, especially now that we have made the points larger to distinguish them from the lines linking each event.

<a href="https://patchwork.data-imaginist.com/"><img src="../images/patchwork.png" alt="patchwork package logo" class="right-side-image"></a>

To deal with this problem we can display two maps: one showing the whole area covered by the points and a second (sometimes called an *inset map*) showing only the events in the town of Hungerford itself. We will do this using the [patchwork package](https://patchwork.data-imaginist.com/) to combine multiple maps made using `ggplot()`.

We have already saved the first map as `hungerford_map_overall`. We can create a map showing only the shootings in Hungerford itself by removing the first two points from `hungerford_points` (since they represent shootings outside the town itself). We can do this for all the existing layers using the `slice()` function from the dplyr package.

We will use the `plot.margin` argument to the `theme()` function to add a small amount of space at the top (and outside the border of) of this map. When we put the two maps together, that space will help separate the two maps. We will also get the map to cover a slightly larger area than it would by default by using the `scale_x_continuous()` and `scale_y_continuous()` functions.

Add this code to your script file and run it.


```{r}
#| filename: "chapter13.R"

# Create inset map showing shootings in Hungerford town
hungerford_map_town <- ggplot() +
  annotation_map_tile(type = "cartolight", zoomin = 0, progress = "none") +
  # Add lines between points
  geom_curve(
    aes(x = x_start, y = y_start, xend = x_end, yend = y_end),
    data = slice(hungerford_lines, 3:n()), 
    arrow = arrow(length = unit(3, "mm"), type = "closed"),
    curvature = -0.2,
    colour = "orange3"
  ) +
  # Add points
  geom_point(
    aes(x = easting, y = northing), 
    data = slice(hungerford_shootings, 3:n()), 
    shape = 21,
    colour = "white",
    fill = "orange3",
    size = 3
  ) +
  # Add labels
  geom_label_repel(
    aes(x = easting, y = northing, label = order),
    data = slice(hungerford_shootings, 3:n()), 
    colour = "white",
    fill = "orange3",
    fontface = "bold",
    label.size = NA
  ) +
  # Add scale bar
  annotation_scale(style = "ticks", line_col = "grey40", text_col = "grey40") +
  # Expand the map to show a larger area around the data
  scale_x_continuous(expand = expansion(0.3)) +
  scale_y_continuous(expand = expansion(0.3)) +
  # Specify co-ordinate system
  coord_sf(crs = "EPSG:27700") +
  labs(title = "Shootings in Hungerford town") +
  theme_void() +
  theme(
    panel.border = element_rect(colour = "grey20", fill = NA),
    plot.margin = margin(t = 12)
  )
```

```{r}
#| filename: "R Console"
#| fig-asp: 1

hungerford_map_town
```


To combine the two maps we can use functions from the patchwork package. Patchwork combines objects (which contain stored `ggplot()` stacks) by using different operators depending on how you want the plots to be arranged. To place two plots next to each other, we just add one map object to the other using the `|` operator. To place one plot on top of the other, we can use the `/` operator (you can combine plots in more-complicated ways by combining these operators, together with parentheses).

So to position the town inset map (stored in `hungerford_map_town`) below the overall map (stored in `hungerford_map_overall`), we can use this code:


```{r}
#| filename: "R Console"
#| fig-asp: 1

(hungerford_map_overall / hungerford_map_town)
```


When we created the `hungerford_map_overall` object in the previous section, we gave the map title a _negative_ border using the `plot.title` argument to the `theme()` function. This had the effect of moving the title downwards onto the map to save space, since the top-left corner of the map was empty. We also added a scale bar, since when you present two related maps of different scales next to one another, it is useful to show the scales of both maps to help readers relate them to one another. You can see on the maps above, for example, the very different scales of the two maps.

We can add shared titles and captions to combined maps created with patchwork using the `plot_annotation()` function. This function has a `theme` argument, which we can use to change the appearance of the shared title and caption just as we use `theme()` to change the appearance of elements on single maps.

Add this code to the script file and run it.


```{r}
#| filename: "chapter13.R"
#| fig-asp: 1

# Combine maps and add titles --------------------------------------------------

(hungerford_map_overall / hungerford_map_town) + 
  plot_annotation(
    title = "Shootings during the Hungerford massacre",
    caption = "data from the official report into the shootings",
    theme = theme(
      plot.caption = element_text(colour = "grey40", hjust = 0),
      plot.title = element_text(colour = "grey50", face = "bold", size = 14)
    )
  )
```


There are various other improvements that we could make to this map based on the mapping skills we have already learned during this course. For example, we could add the locations of buildings or particular facilities using data from OpenStreetMap. What information we choose to present on the map will depend on what information we think it is important to communicate to our audience.


<!--
## Plotting the journey to crime

For many crimes (especially predatory crimes), offenders must travel to and from 
the location of the offence. Investigators will sometimes know some points along
this journey, but not the whole route. For example, detectives investigating a
kidnapping murder may know where the victim was taken from and where the body 
was found, but not know where the offender or victim were between those points.
For a more-common crime such as car theft, police may know where a car was 
stolen from and where it was recovered, but not have any information about where
it was between those times.

When investigating crimes involving travel between points, it will often be 
useful to work out the route taken between two points. For example, establishing
a possible route might make it possible to check CCTV cameras, analyse toll-road 
records or seek witnesses along the way. A potential route might also allow an
analyst to consider whether any other crimes along that route might be part of a
crime series. If pairs of points are known for multiple crimes that are believed
to be a linked series, it is possible that looking for overlapping parts of the 
routes between pairs of points might help identify the offender's anchor point.

We can plot the fastest route between two locations on foot or in a vehicle 
using tools that were designed for transport planning. The 
[`stplanr` package](https://docs.ropensci.org/stplanr/) uses data from the
OpenStreetMap routing service to work out the fastest route between two points.
-->



## Putting it all together

In this chapter we have learned how to map crime series, focusing on displaying a sequence of events on a map. We have also learned how to combine maps using the patchwork package.


```{r names-killed}
#| echo: false

names_killed <- hungerford_shootings |> 
  pull("victims") |> 
  str_split("\n") |> 
  unlist() |> 
  str_subset("†") |> 
  str_remove("†") |> 
  as_tibble() |> 
  separate(value, into = c("first", "last")) |> 
  arrange(last) |> 
  mutate(name = str_glue("{first} {last}")) |> 
  pull("name") |> 
  str_to_title() |> 
  str_flatten_comma(last = " and ")
```


When we are mapping crime data, it is important to remember that the rows in the data we are using often represent traumatic events that have happened to people. In this chapter, every row in the data represents one or more people who were killed or injured during the massacre. The people killed were `r names_killed`.

<p class="full-width-image image-border"><img src="../images/roger_brereton.jpg" alt="Photograph from the funeral of police constable Roger Brereton, one of the people killed in the Hungerford Massacre"></p>

You can put the code from this chapter together to see everything that is needed to make a composite map of the Hungerford massacre from the original data file.


```{r}
#| filename: "chapter13.R"
#| eval: false

# This script creates a combination of maps showing the sequence of shootings
# during the Hungerford massacre in 1987



# Load data --------------------------------------------------------------------

# Load packages
pacman::p_load(ggrepel, ggspatial, patchwork, sf, tidyverse)

# Load shootings data
hungerford_shootings <- read_csv("https://mpjashby.github.io/crimemappingdata/hungerford_shootings.csv")



# Prepare data -----------------------------------------------------------------

# Create dataset of lines joining shootings in sequence
hungerford_lines <- hungerford_shootings |> 
  rename(x_end = easting, y_end = northing) |> 
  mutate(x_start = lag(x_end), y_start = lag(y_end)) |> 
  # Remove the first line, which contains missing values and which we don't need
  drop_na(x_start, y_start)



# Make component maps ----------------------------------------------------------

# Create map showing overall locations of shootings
hungerford_map_overall <- ggplot() +
  # Plot base map
  annotation_map_tile(type = "cartolight", zoomin = 0, progress = "none") +
  # Plot lines between points
  geom_curve(
    aes(x = x_start, y = y_start, xend = x_end, yend = y_end),
    data = hungerford_lines, 
    arrow = arrow(length = unit(3, "mm"), type = "closed"),
    curvature = -0.2,
    colour = "orange3"
  ) +
  # Add points
  geom_point(
    aes(x = easting, y = northing), 
    data = hungerford_shootings,
    shape = 21,
    colour = "white",
    fill = "orange3",
    size = 3
  ) +
  # Add labels
  geom_label_repel(
    aes(x = easting, y = northing, label = order),
    data = filter(hungerford_shootings, order %in% 1:2), 
    colour = "white",
    fill = "orange3",
    fontface = "bold",
    label.size = NA
  ) +
  # Add scale bar
  annotation_scale(style = "ticks", line_col = "grey40", text_col = "grey40") +
  # Expand the map to show a larger area above/below the data
  scale_y_continuous(expand = expansion(2)) +
  # Specify co-ordinate system
  coord_sf(crs = "EPSG:27700") +
  labs(title = " Shootings in Wiltshire") +
  theme_void() +
  theme(
    panel.border = element_rect(colour = "grey20", fill = NA),
    plot.title = element_text(margin = margin(b = -18))
  )

# Create inset map showing shootings in Hungerford town
hungerford_map_town <- ggplot() +
  annotation_map_tile(type = "cartolight", zoomin = 0, progress = "none") +
  # Add lines between points
  geom_curve(
    aes(x = x_start, y = y_start, xend = x_end, yend = y_end),
    data = slice(hungerford_lines, 3:n()), 
    arrow = arrow(length = unit(3, "mm"), type = "closed"),
    curvature = -0.2,
    colour = "orange3"
  ) +
  # Add points
  geom_point(
    aes(x = easting, y = northing), 
    data = slice(hungerford_shootings, 3:n()), 
    shape = 21,
    colour = "white",
    fill = "orange3",
    size = 3
  ) +
  # Add labels
  geom_label_repel(
    aes(x = easting, y = northing, label = order),
    data = slice(hungerford_shootings, 3:n()), 
    colour = "white",
    fill = "orange3",
    fontface = "bold",
    label.size = NA
  ) +
  # Add scale bar
  annotation_scale(style = "ticks", line_col = "grey40", text_col = "grey40") +
  # Expand the map to show a larger area around the data
  scale_x_continuous(expand = expansion(0.3)) +
  scale_y_continuous(expand = expansion(0.3)) +
  # Specify co-ordinate system
  coord_sf(crs = "EPSG:27700") +
  labs(title = "Shootings in Hungerford town") +
  theme_void() +
  theme(
    panel.border = element_rect(colour = "grey20", fill = NA),
    plot.margin = margin(t = 12)
  )



# Combine maps and add titles --------------------------------------------------

(hungerford_map_overall / hungerford_map_town) + 
  plot_annotation(
    title = "Shootings during the Hungerford massacre",
    caption = "data from the official report into the shootings",
    theme = theme(
      plot.caption = element_text(colour = "grey40", hjust = 0),
      plot.title = element_text(colour = "grey50", face = "bold", size = 14)
    )
  )

```


::: {.credits}
[Photograph of PC Roger Brereton's funeral](https://www.getreading.co.uk/news/berkshire-history/gallery/30-years-hungerford-massacre-13495555) from Berkshire Live, [artwork by @allison_horst](https://twitter.com/allison_horst).
:::


::: {.callout-quiz .callout}
#### Check your knowledge: Revision questions

Answer these questions to check you have understood the main points covered in this chapter. Write between 50 and 100 words to answer each question.

1. What is a crime series, and why is it important to map crime series rather than treating each crime as an isolated event?
2. What challenges do investigators face when trying to determine whether crimes are linked?
3. Why is it useful to visualize a crime series on a map? Give some examples of when a map of a crime series might be useful.
4. Explain the role of arrows and labels in mapping crime series. How do these elements help improve the clarity of crime maps?
5. Describe the steps taken to prepare a dataset for mapping a crime series in R. Why is it necessary to create a dataset of linked points?
:::
